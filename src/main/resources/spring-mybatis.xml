<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="
		http://www.springframework.org/schema/beans
	    http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/tx 
		http://www.springframework.org/schema/tx/spring-tx.xsd
		http://www.springframework.org/schema/aop 
		http://www.springframework.org/schema/aop/spring-aop.xsd
		http://www.springframework.org/schema/context 
		http://www.springframework.org/schema/context/spring-context.xsd">

	<!-- 配置数据源 -->
	<bean id="dataSource1" class="com.alibaba.druid.pool.DruidDataSource"
		init-method="init" destroy-method="close">

		<!-- 基本属性 url、user、password -->
		<property name="url" value="${jdbc.db1_url}" />
		<property name="username" value="${jdbc.db1_username}" />
		<property name="password" value="${jdbc.db1_password}" />

		<!-- 配置初始化大小、最小、最大 -->
		<property name="initialSize" value="1" />
		<property name="minIdle" value="1" />
		<property name="maxActive" value="20" />

		<!-- 配置获取连接等待超时的时间 -->
		<property name="maxWait" value="60000" />

		<!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
		<property name="timeBetweenEvictionRunsMillis" value="60000" />

		<!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
		<property name="minEvictableIdleTimeMillis" value="300000" />

		<property name="validationQuery" value="${validationQuery}" />
		<property name="testWhileIdle" value="true" />
		<property name="testOnBorrow" value="false" />
		<property name="testOnReturn" value="false" />

		<!-- 打开PSCache，并且指定每个连接上PSCache的大小 -->
		<property name="poolPreparedStatements" value="false" />
		<property name="maxPoolPreparedStatementPerConnectionSize"
			value="20" />

		<!-- 打开removeAbandoned功能 -->
		<property name="removeAbandoned" value="true" />
		<!-- 1800秒，也就是30分钟 -->
		<property name="removeAbandonedTimeout" value="1800" />
		<!-- 关闭abanded连接时输出错误日志 -->
		<property name="logAbandoned" value="true" />

		<!-- 配置监控统计拦截的filters -->
		<property name="filters" value="mergeStat" />
	</bean>

	<bean id="dataSource2" class="com.alibaba.druid.pool.DruidDataSource"
		  init-method="init" destroy-method="close">
		<property name="url" value="${jdbc.db2_url}" />
		<property name="username" value="${jdbc.db2_username}" />
		<property name="password" value="${jdbc.db2_password}" />
		<property name="initialSize" value="1" />
		<property name="minIdle" value="1" />
		<property name="maxActive" value="20" />
		<property name="maxWait" value="60000" />
		<property name="timeBetweenEvictionRunsMillis" value="60000" />
		<property name="minEvictableIdleTimeMillis" value="300000" />
		<property name="validationQuery" value="${validationQuery}" />
		<property name="testWhileIdle" value="true" />
		<property name="testOnBorrow" value="false" />
		<property name="testOnReturn" value="false" />
		<property name="poolPreparedStatements" value="false" />
		<property name="maxPoolPreparedStatementPerConnectionSize"
				  value="20" />
		<property name="removeAbandoned" value="true" />
		<property name="removeAbandonedTimeout" value="1800" />
		<property name="logAbandoned" value="true" />
		<property name="filters" value="mergeStat" />
	</bean>

	<bean id="dataSource" class="com.inschos.yunda.trans.task.data.database.DynamicDataSource">
		<property name="defaultTargetDataSource" ref="dataSource1"/>
		<property name="targetDataSources">
			<map>
				<entry key="dataSource1" value-ref="dataSource1"/>
				<entry key="dataSource2" value-ref="dataSource2"/>
			</map>
		</property>
	</bean>

	<!-- mybatis 的 SqlSession 的工厂: SqlSessionFactoryBean -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<!-- 自动扫描entity目录, 省掉Configuration.xml里的手工配置 -->
		<property name="mapperLocations" value="classpath:com/inschos/yunda/trans/task/data/mapper/*.xml" />
		<property name="typeAliasesPackage" value="com.inschos.yunda.trans.task.model"></property>
	</bean>

	<bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate">
		<constructor-arg index="0" ref="sqlSessionFactory" />
	</bean>

	<!-- mybatis 自动扫描.mapper文件 : MapperScannerConfigurer -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.inschos.yunda.trans.task.data.mapper" />
		<property name="sqlSessionTemplateBeanName" value="sqlSession" />
	</bean>

	<!-- 事务管理 : DataSourceTransactionManager -->
	<bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>

	<!-- 定义事务通知 -->
	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<!-- 定义方法的过滤规则 -->
		<tx:attributes>
			<!-- 所有方法都使用事务 -->
			<tx:method name="*" propagation="REQUIRED" rollback-for="Exception" />
			<!-- 定义所有find开头的方法都是只读的 -->
			<tx:method name="find*" read-only="true" />
		</tx:attributes>
	</tx:advice>


	<aop:aspectj-autoproxy></aop:aspectj-autoproxy>
	<bean id="manyDataSourceAspect" class="com.inschos.yunda.trans.task.data.database.DataSourceAspect" />
	<aop:config>
		<!-- 扫描 注解的 数据源 -->
		<aop:aspect id="c" ref="manyDataSourceAspect">
			<aop:pointcut id="tx" expression="execution(* com.inschos.yunda.trans.task.data.mapper.*.*(..))"/>
			<aop:before pointcut-ref="tx" method="before"/>
		</aop:aspect>
	</aop:config>
	<!-- 定义AOP配置 -->
	<aop:config>
		<!-- 定义一个切入点 -->
		<aop:pointcut expression="execution (* com.inschos.yunda.trans.task.data.dao.*.*(..))"
			id="services" />
		<!-- 对切入点和事务的通知，进行适配 -->
		<aop:advisor advice-ref="txAdvice" pointcut-ref="services" />
	</aop:config>
</beans>